import sys
sys.path.append('..')
import unittest

from armoryengine.ALL import *


class SigningTester(unittest.TestCase):

   def setUp(self):
      useMainnet()

   def testFormat(self):
      x = b'18426974636f696e205369676e6564204d6573736167653a0a0568656c6c6f'
      print hex_to_binary(x)
      x2 = binary_to_hex(formatMessageToSign(b'hello'))
      self.assertEqual(x,x2)


   def testVerify(self):
      sig = b'G/8M14BRD6GU96y6o1x+9xSfoWBdzZp8p1e/vAZ857D4l9+ozM08CTnzqsxkv1GANssNh1MEmtqgrgEfSPRX5gU='
      msg = hex_to_binary(b'6368616e67656c6f672020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f6368616e67656c6f672e747874202020202020202020202020323136363963313762363230353033633035353830303533353935646265646461316139633231343662336664613839313232653234343434613435646336620d0a626f6f7473747261702020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f626f6f7473747261702e6461742e746f7272656e7420202020623632633038393332363638636531363264353132323631333539343037323465393066346337313730346163393336663734636331353362333463633235310d0a646f776e6c6f6164732020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f646c6c696e6b732e7478742020202020202020202020202020366335306538633864386266393830306366353332643462323062663439646137633133343336313839663663316230326661386232386233383832396238330d0a6e6f746966792020202020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f6e6f746966792e747874202020202020202020202020202020656261343931333936636531643936363731373761366532393861653334383563316462333564313064383466383965633963643838326261633266616139610d0a')
      digest = hex_to_binary(b'2d2d2d2d2d424547494e20424954434f494e205349474e4544204d4553534147452d2d2d2d2d0d0a436f6d6d656e743a205369676e656420627920426974636f696e2041726d6f72792076302e39322e330d0a0d0a6368616e67656c6f672020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f6368616e67656c6f672e747874202020202020202020202020323136363963313762363230353033633035353830303533353935646265646461316139633231343662336664613839313232653234343434613435646336620d0a626f6f7473747261702020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f626f6f7473747261702e6461742e746f7272656e7420202020623632633038393332363638636531363264353132323631333539343037323465393066346337313730346163393336663734636331353362333463633235310d0a646f776e6c6f6164732020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f646c6c696e6b732e7478742020202020202020202020202020366335306538633864386266393830306366353332643462323062663439646137633133343336313839663663316230326661386232386233383832396238330d0a6e6f746966792020202020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f6e6f746966792e747874202020202020202020202020202020656261343931333936636531643936363731373761366532393861653334383563316462333564313064383466383965633963643838326261633266616139610d0a0d0a2d2d2d2d2d424547494e20424954434f494e205349474e41545552452d2d2d2d2d0d0a0d0a0d0a472f384d3134425244364755393679366f31782b397853666f5742647a5a70387031652f76415a38353744346c392b6f7a4d303843546e7a7173786b763147410d0a4e73734e68314d456d74716772674566535052583567553d0d0a3d416e6a4e0d0a2d2d2d2d2d454e4420424954434f494e205349474e41545552452d2d2d2d2d')

      formatted = hex_to_binary(b'2d2d2d2d2d424547494e20424954434f494e205349474e4544204d4553534147452d2d2d2d2d0d0a436f6d6d656e743a205369676e656420627920426974636f696e2041726d6f72792076302e39322e330d0a0d0a6368616e67656c6f672020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f6368616e67656c6f672e747874202020202020202020202020323136363963313762363230353033633035353830303533353935646265646461316139633231343662336664613839313232653234343434613435646336620d0a626f6f7473747261702020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f626f6f7473747261702e6461742e746f7272656e7420202020623632633038393332363638636531363264353132323631333539343037323465393066346337313730346163393336663734636331353362333463633235310d0a646f776e6c6f6164732020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f646c6c696e6b732e7478742020202020202020202020202020366335306538633864386266393830306366353332643462323062663439646137633133343336313839663663316230326661386232386233383832396238330d0a6e6f746966792020202020202068747470733a2f2f73332e616d617a6f6e6177732e636f6d2f626974636f696e61726d6f72792d6d656469612f6e6f746966792e747874202020202020202020202020202020656261343931333936636531643936363731373761366532393861653334383563316462333564313064383466383965633963643838326261633266616139610d0a0d0a2d2d2d2d2d424547494e20424954434f494e205349474e41545552452d2d2d2d2d0d0a0d0a0d0a472f384d3134425244364755393679366f31782b397853666f5742647a5a70387031652f76415a38353744346c392b6f7a4d303843546e7a7173786b763147410d0a4e73734e68314d456d74716772674566535052583567553d0d0a3d416e6a4e0d0a2d2d2d2d2d454e4420424954434f494e205349474e41545552452d2d2d2d2d')
      self.assertEqual(standardizeMessage(digest, True), formatted)

      sigb, msgb = readSigBlock(digest)
      self.assertEqual(sig, sigb)
      self.assertEqual(msg, msgb)
      addr = b'1NWvhByxfTXPYNT4zMBmEY3VL8QJQtQoei'
      self.assertEqual(verifySignature(msg, sig)['address'], addr)


   def testSign(self):
      secret = b'secretsecretsecretsecretsecretse'
      message = b'hello there'
      addr = ABEK_Generic()
      addr.sbdPrivKeyData = SecureBinaryData(secret)
      pk65 = CryptoECDSA().ComputePublicKey(addr.sbdPrivKeyData)
      addr.sbdPublicKey33 = CryptoECDSA().CompressPoint(pk65)
      sig = addr.getB64Signature(message)

      self.assertTrue(verifySignature(message, sig))

   def testMisc(self):
      pvk1=b'\x01'*32
      text1=b'Hello world!\n'

      addr = ABEK_Generic()
      addr.sbdPrivKeyData = SecureBinaryData(pvk1)
      pk65 = CryptoECDSA().ComputePublicKey(addr.sbdPrivKeyData)
      addr.sbdPublicKey33 = CryptoECDSA().CompressPoint(pk65)
      sig = addr.getB64Signature(text1)
      self.assertTrue(verifySignature(text1, sig))

      d = addr.b64SignMessage(text1)
      self.assertEqual(d[:31], b'-----BEGIN BITCOIN MESSAGE-----')
      self.assertEqual(d[-29:], b'-----END BITCOIN MESSAGE-----')
      self.assertTrue(verifySignedMessage(d))
